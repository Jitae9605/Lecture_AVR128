
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009eb  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000420  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000261  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001f71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	a7 c0       	rjmp	.+334    	; 0x204 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define F_CPU 7432800UL
#include <avr/io.h>
#include <util/delay.h>

int main()
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	a6 97       	sbiw	r28, 0x26	; 38
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0xFF;
  d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRD = 0x00;
  d4:	11 ba       	out	0x11, r1	; 17
	
	int arr_in[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	de 01       	movw	r26, r28
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	8a 95       	dec	r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x28>
	int arr_out0[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,0x3f};
  e8:	86 e1       	ldi	r24, 0x16	; 22
  ea:	e0 e1       	ldi	r30, 0x10	; 16
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	de 01       	movw	r26, r28
  f0:	51 96       	adiw	r26, 0x11	; 17
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	8a 95       	dec	r24
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x3a>
	int num_1 = 0;
	int num_10 = 0;
	int num_100 = 0;
	int num_1000 = 0;
	
	PORTA = arr_out0[0];
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	8b bb       	out	0x1b, r24	; 27
	PORTF = arr_out0[0];
  fe:	89 89       	ldd	r24, Y+17	; 0x11
 100:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	int arr_in[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
	int arr_out0[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,0x3f};
	int num_1 = 0;
	int num_10 = 0;
	int num_100 = 0;
	int num_1000 = 0;
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
	
	int arr_in[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
	int arr_out0[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,0x3f};
	int num_1 = 0;
	int num_10 = 0;
	int num_100 = 0;
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
	DDRD = 0x00;
	
	int arr_in[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
	int arr_out0[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,0x3f};
	int num_1 = 0;
	int num_10 = 0;
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
	DDRF = 0xFF;
	DDRD = 0x00;
	
	int arr_in[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
	int arr_out0[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,0x3f};
	int num_1 = 0;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
	PORTF = arr_out0[0];

	while(1)
	{

		if(PIND == arr_in[0])
 114:	e0 b3       	in	r30, 0x10	; 16
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	a9 81       	ldd	r26, Y+1	; 0x01
 11a:	ba 81       	ldd	r27, Y+2	; 0x02
 11c:	ea 17       	cp	r30, r26
 11e:	fb 07       	cpc	r31, r27
 120:	39 f5       	brne	.+78     	; 0x170 <main+0xb8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	0f ea       	ldi	r16, 0xAF	; 175
 124:	14 e4       	ldi	r17, 0x44	; 68
 126:	a2 e0       	ldi	r26, 0x02	; 2
 128:	01 50       	subi	r16, 0x01	; 1
 12a:	10 40       	sbci	r17, 0x00	; 0
 12c:	a0 40       	sbci	r26, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x70>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x7a>
 132:	00 00       	nop
			// 0000 0000
			// 1111 1111
			// 0 ~ 15
			// 0 1 2 3 4 5 6 7 8 9 A B C D E F
			
			num_1++;
 134:	01 96       	adiw	r24, 0x01	; 1
			if(num_1 > 9)
 136:	8a 30       	cpi	r24, 0x0A	; 10
 138:	91 05       	cpc	r25, r1
 13a:	d4 f0       	brlt	.+52     	; 0x170 <main+0xb8>
			{
				num_1 = 0;
				num_10++;
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
				
				if(num_10 > 9)
 140:	2a 30       	cpi	r18, 0x0A	; 10
 142:	31 05       	cpc	r19, r1
 144:	74 f0       	brlt	.+28     	; 0x162 <main+0xaa>
				{
					num_10 = 0;
					num_100++;
 146:	4f 5f       	subi	r20, 0xFF	; 255
 148:	5f 4f       	sbci	r21, 0xFF	; 255
					
					if(num_100 > 9)
 14a:	4a 30       	cpi	r20, 0x0A	; 10
 14c:	51 05       	cpc	r21, r1
 14e:	64 f0       	brlt	.+24     	; 0x168 <main+0xb0>
					{
						num_100 = 0;
						num_1000++;
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
					num_10 = 0;
					num_100++;
					
					if(num_100 > 9)
					{
						num_100 = 0;
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
				num_1 = 0;
				num_10++;
				
				if(num_10 > 9)
				{
					num_10 = 0;
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
			// 0 1 2 3 4 5 6 7 8 9 A B C D E F
			
			num_1++;
			if(num_1 > 9)
			{
				num_1 = 0;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	07 c0       	rjmp	.+14     	; 0x170 <main+0xb8>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	04 c0       	rjmp	.+8      	; 0x170 <main+0xb8>
				num_10++;
				
				if(num_10 > 9)
				{
					num_10 = 0;
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
			// 0 1 2 3 4 5 6 7 8 9 A B C D E F
			
			num_1++;
			if(num_1 > 9)
			{
				num_1 = 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
				}
				
			}
			
		}
				PORTA = 0x07;			// 0111
 170:	e7 e0       	ldi	r30, 0x07	; 7
 172:	eb bb       	out	0x1b, r30	; 27
				PORTF = arr_out0[num_1];
 174:	fc 01       	movw	r30, r24
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	01 e0       	ldi	r16, 0x01	; 1
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	0c 0f       	add	r16, r28
 180:	1d 1f       	adc	r17, r29
 182:	e0 0f       	add	r30, r16
 184:	f1 1f       	adc	r31, r17
 186:	a0 89       	ldd	r26, Z+16	; 0x10
 188:	e2 e6       	ldi	r30, 0x62	; 98
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	a0 83       	st	Z, r26
 18e:	a2 e4       	ldi	r26, 0x42	; 66
 190:	b7 e0       	ldi	r27, 0x07	; 7
 192:	11 97       	sbiw	r26, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xda>
				_delay_ms(1);
				
				PORTA = 0x0B;			// 1011
 196:	ab e0       	ldi	r26, 0x0B	; 11
 198:	ab bb       	out	0x1b, r26	; 27
				PORTF = arr_out0[num_10];
 19a:	d9 01       	movw	r26, r18
 19c:	aa 0f       	add	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	01 e0       	ldi	r16, 0x01	; 1
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	0c 0f       	add	r16, r28
 1a6:	1d 1f       	adc	r17, r29
 1a8:	a0 0f       	add	r26, r16
 1aa:	b1 1f       	adc	r27, r17
 1ac:	50 96       	adiw	r26, 0x10	; 16
 1ae:	ac 91       	ld	r26, X
 1b0:	a0 83       	st	Z, r26
 1b2:	a2 e4       	ldi	r26, 0x42	; 66
 1b4:	b7 e0       	ldi	r27, 0x07	; 7
 1b6:	11 97       	sbiw	r26, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0xfe>
				_delay_ms(1);
				
				PORTA = 0x0D;			// 1101
 1ba:	ad e0       	ldi	r26, 0x0D	; 13
 1bc:	ab bb       	out	0x1b, r26	; 27
				PORTF = arr_out0[num_100];
 1be:	da 01       	movw	r26, r20
 1c0:	aa 0f       	add	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	01 e0       	ldi	r16, 0x01	; 1
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	0c 0f       	add	r16, r28
 1ca:	1d 1f       	adc	r17, r29
 1cc:	a0 0f       	add	r26, r16
 1ce:	b1 1f       	adc	r27, r17
 1d0:	50 96       	adiw	r26, 0x10	; 16
 1d2:	ac 91       	ld	r26, X
 1d4:	a0 83       	st	Z, r26
 1d6:	a2 e4       	ldi	r26, 0x42	; 66
 1d8:	b7 e0       	ldi	r27, 0x07	; 7
 1da:	11 97       	sbiw	r26, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x122>
				_delay_ms(1);
				
				PORTA = 0x0E;			// 1011
 1de:	ae e0       	ldi	r26, 0x0E	; 14
 1e0:	ab bb       	out	0x1b, r26	; 27
				PORTF = arr_out0[num_1000];
 1e2:	db 01       	movw	r26, r22
 1e4:	aa 0f       	add	r26, r26
 1e6:	bb 1f       	adc	r27, r27
 1e8:	01 e0       	ldi	r16, 0x01	; 1
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	0c 0f       	add	r16, r28
 1ee:	1d 1f       	adc	r17, r29
 1f0:	a0 0f       	add	r26, r16
 1f2:	b1 1f       	adc	r27, r17
 1f4:	50 96       	adiw	r26, 0x10	; 16
 1f6:	ac 91       	ld	r26, X
 1f8:	a0 83       	st	Z, r26
 1fa:	a2 e4       	ldi	r26, 0x42	; 66
 1fc:	b7 e0       	ldi	r27, 0x07	; 7
 1fe:	11 97       	sbiw	r26, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x146>
 202:	88 cf       	rjmp	.-240    	; 0x114 <main+0x5c>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
